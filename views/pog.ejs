<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="style.css">
  <title>OnlyPogs: <%=pog.name%></title>
</head>

<body>

  <h1>
    <%=pog.name%>
  </h1>

  <div class="center">
    <!-- <button id="editButton" onclick="edit()">Edit </button>
    <button id="cancelButton" onclick="cancel(event)" style="display: none;">Cancel</button> -->
    <!--Created the image of the pog on the pog page-->
    <a id="img" href="/pogTable">
      <img src="/pogs/<%=pog.name%>.png" alt="/pogs/<%=pog.name%>.png" width="200px" height="auto" id="pogPNG"
        onerror="this.src ='/pogs/<%=pog.name%>.png';unknown(); this.onerror = ' ' ">
    </a>

    <a id="img">
      <img src="/pogs/<%=pog.name%>.png" alt="/pogs/<%=pog.name%>.png" width="200px" height="auto" id="pogPNG"
        draggable="false" onerror="unknown()">
      <input type="file" id="upload" name="upload" accept=".png" style="display: none;">

    </a>

    <div id="infoBoxes">

      <!--Dropdown menu that displays the available colors of the currently selected pog-->
      <div class="infobox">
        <p class="infoheader"><label>Colors</label></p>
        <select id="Pogs" onchange="pogChange()" class="info">
          <%let colors=pog.colors || []; %>
          <% for (let color=0; color < colors.length; color++) { %>
              <option value="<%= color %>">
                <%= colors[color] %>
              </option>
              <% } %>
        </select>
        <input type="text" id="selectedColor" style="display: none;" class='info'></input>
        <p id="error"></p>
      </div>

      <!--Displays the amount produce of the current pog-->
      <div class="infobox">
        <p class="infoheader">Amount Produced </p>
        <p class="info" id="amount">
          <%= pog.amount %>
        </p>
      </div>
      <!--Displays the serial number of the current pog-->
      <div class="infobox">
        <p class="infoheader">Serial Number </p>
        <p class="info" id="serial">
          <%= pog.serial %>
        </p>
      </div>
      <!--Displays the tags of the current pog-->
      <div class="infobox">
        <p class="infoheader">Tags</p>
        <p class="info" id="tags">
          <%= pog.tags %>
        </p>
      </div>
      
      <!--Displays the Rarity of the current pog-->
      <div class="infobox">
        <p class="infoheader">Pog Rarity</p>
        <p class="info" id="rarityBox"></p>
      </div>
      <!--Displays the lore of the current pog-->
      <div class="infobox">
        <p class='infoheader'>Pog Lore</p>
        <p class='info' id="lore">
          <%= pog.lore %>
        </p>
      </div>
    </div>
  </div>

  <script>
    // v a r userPerm = < % -userPerm %>;
    // if (userPerm < 3) {
    //   document.getElementById("editButton").style.display = "none";
    //   document.getElementById("cancelButton").style.display = "none";
    // }
    var pogName = "<%=pog.name%>";
    var pog = JSON.parse(JSON.stringify(<%-JSON.stringify(pog)%>)); // DO NOT TOUCH, WILL BREAK
    var pogImage = document.getElementById("Pogs");
    var editMode = false
    var pogpng = document.getElementById("pogPNG");
    var editMode = false
    var originalImageSource = pogpng.src;
    var uploadButton = document.getElementById('upload');
    var imageMap = new Map();
    var pogCopy = JSON.parse(JSON.stringify(pog));
    var uploadedImages = {};

    //A function that changes the pog image based on the currently selected pog
    function pogChange() {
      console.log(pogImage.value);
      if (pogImage.value == 0) {
        document.getElementById('error').innerText = ""
        let pogpng = document.getElementById("pogPNG")
        pogpng.src = `/pogs/${pog}.png`
      } else {
        let pogpng = document.getElementById("pogPNG")
        document.getElementById('error').innerText = ""
        pogpng.src = `/pogs/${pog}${pogImage.value}.png`
        pogpng.setAttribute('onerror', `this.src ='/pogs/${pog}.png'; unknown() ; this.onerror = ' '  `)
      }
    }

      var editMode = false
      var pogpng = document.getElementById("pogPNG");
      var originalImageSource = pogpng.src;

    function unknown() {
      const errorMessage = "Sorry, this pog/color does not exist.";
      document.getElementById('error').innerText = errorMessage;
      console.error(`Error: ${errorMessage}`);
    }


    var pogData = <%-JSON.stringify(pog) %>; // Do not beautify; remove spaces, if they appear on this line, will cause errors

    // total pog amount
    var totalPog = 1856.5

    //getting the pog percentage out of the total amount of pogs
    var pogPercent = pogData.amount / totalPog * 100
    pogPercent = pogPercent.toFixed(2)

    //setting rarities
    if (pogPercent >= 10) {
      document.getElementById('rarityBox').innerText = 'Common'
    } else if (pogPercent < 10 && pogPercent >= 3) {
      document.getElementById('rarityBox').innerText = 'Uncommon'
    } else if (pogPercent < 3 && pogPercent >= 1) {
      document.getElementById('rarityBox').innerText = 'Rare'
    } else if (pogPercent < 1 && pogPercent > 0.05) {
      document.getElementById('rarityBox').innerText = 'Epic'
    } else if (pogPercent <= 0.05) {
      document.getElementById('rarityBox').innerText = 'Legendary'
    } else {
      document.getElementById('rarityBox').innerText = 'N/A'
    }

    var originalData = {};

    // Define the blurListener function in the global scope
    var blurListener = function () {
      // Override the data of the currently selected dropdown menu segment
      var selectedColor = document.getElementById("selectedColor").value;
      var selectedIndex = document.getElementById("Pogs").selectedIndex;
      document.getElementById("Pogs").options[selectedIndex].text = selectedColor;
    };

    let pogImageValue = 0;
    pogPNG.onclick = function () {
      window.location.href = "/"
    }
    
    function edit() {
      // if (userPerm > 2) {
      editMode = true;
      
      // Get the select element
      var selectElement = document.getElementById("Pogs");

  // Calculate the new value for the extra option
  var optionValues = Array.from(selectElement.options).map(option => parseInt(option.value));
  var maxValue = Math.max(...optionValues);
  newExtraValue = maxValue +  1;
  // Check if the extra option already exists
  var extraOptionExists = Array.from(selectElement.options).some(option => option.value === newExtraValue);
  if (!extraOptionExists) {
    var extraOption = document.createElement("option");
    extraOption.text = "Choose an extra color...";
    extraOption.value = newExtraValue;
    selectElement.appendChild(extraOption);
  }
  

      // if (userPerm > 2) {
        pogCopy = JSON.parse(JSON.stringify(pog));
        const infoElements = document.getElementsByClassName("info");
      for (let i = 0; i < infoElements.length; i++) {
        const element = infoElements[i];
        if (element.id === "rarityBox" || element.id === "selectedColor" || element.id === "Pogs") {
          element.setAttribute("contentEditable", "false");
        } else {
          originalData[element.id] = element.textContent;
          element.textContent = originalData[element.id];
          element.setAttribute("contentEditable", "true");
        }
      }
      const dropdownMenu = document.getElementById("Pogs");
      originalDropdownHTML = dropdownMenu.innerHTML;

      // Set selectedColor box value to the text of the first option
      const selectedColorElement = document.getElementById("Pogs");
      const selectedColor = selectedColorElement.options[selectedColorElement.selectedIndex].text;
      document.getElementById("selectedColor").value = selectedColor;
      
      document.getElementById("selectedColor").style.display = "block";
      
      const pogpng = document.getElementById("pogPNG");
      pogpng.onclick = function (event) {
        if (editMode) {
          // Replace the image with the FillerPog
          pogpng.src = "/pogs/FillerPog.png";
          uploadButton.style.display = 'block';
        } else {
          pogPNG.onclick = window.location.href = "/"
        };
      };

      document.getElementById("selectedColor").addEventListener("blur", blurListener);
      document.getElementById("cancelButton").style.display = "inline";
      document.getElementById("editButton").innerHTML = "Save";
      document.getElementById("editButton").onclick = save;
      // }
    }
    
    // Function to handle changing the pog image based on the selected pog and color
    function pogChange() {
      // if (userPerm > 2) {
      const pogImageValue = pogImage.value;
      
      document.getElementById('error').innerText = "";

      if (pogImageValue == 0) {
        pogpng.src = `/pogs/${pogName}.png`;
      } else {
        pogpng.src = `/pogs/${pogName}${pogImageValue}.png`;
      }

      // Add onerror event to handle missing image
      pogpng.onerror = function () {
        // Call unknown function
        unknown();
        // Replace the image with the FillerPog
        pogpng.src = "/pogs/FillerPog.png";
        // }
      }

      const selectedColorElement = document.getElementById("Pogs");
      const selectedColor = selectedColorElement.options[selectedColorElement.selectedIndex].text;

      if (selectedColor === "FillerPog") {
        pogpng.src = "/pogs/FillerPog.png";
      }

      document.getElementById("selectedColor").value = selectedColor;
      // -----------------------------
      // Get the selected color
      if (uploadedImages[selectedColor]) {
        pogpng.src = uploadedImages[selectedColor];
        console.log(uploadedImages[selectedColor]);
      }
      // }
    }


   uploadButton.addEventListener('change', function () {
        // Get the selected file
        var file = uploadButton.files[0];
        
        // Check if a file was selected and if it's a PNG
        if (file && file.type === 'image/png') {
          // Create a new FileReader
          var reader = new FileReader();

          // Set the onload function of the FileReader
          reader.onload = function (e) {
            // Set the src of the image to the data URL of the file
            pogpng.src = e.target.result;
            
            let dropdown = document.getElementById('Pogs');
            let selectedValue = dropdown.value;
            let selectedText = dropdown.options[dropdown.selectedIndex].text;
            
            // Get the pogName

            var pogNumber = document.getElementById('Pogs').value;
            console.log(pogNumber);

            // Create a new property name by concatenating pogName and pogNumber (if it's not 0)
            let newPropertyName = parseInt(pogNumber) !== 0 ? pogName + pogNumber : pogName;

            // Save the uploaded image source under the new property name
            uploadedImages[newPropertyName] = pogpng.src;

            // If the property already exists in the map, delete the older one
            if (imageMap.has(newPropertyName)) {
              imageMap.delete(newPropertyName);
            }

            // Add the new object to the map
            imageMap.set(newPropertyName, uploadedImages);

            console.log(Array.from(imageMap.values()));

            // Hide the upload button
            uploadButton.style.display = 'none';
          };

          // Read the file as a data URL
          reader.readAsDataURL(file);
        }
      });

    function cancel(event) {
      // if (userPerm > 2) {
      editMode = false
      event.preventDefault();

      const infoElements = document.getElementsByClassName("info");
      for (let i = 0; i < infoElements.length; i++) {
        const element = infoElements[i];
        element.textContent = originalData[element.id] || element.textContent;
        element.setAttribute("contentEditable", "false");
      }

      const selectedColor = document.getElementById("selectedColor");
      selectedColor.removeEventListener("blur", blurListener);
      selectedColor.style.display = "none";

      const dropdownMenu = document.getElementById("Pogs");
      dropdownMenu.innerHTML = originalDropdownHTML;

      pogpng.src = originalImageSource || pogpng.src;

      document.getElementById("cancelButton").style.display = "none";
      const editButton = document.getElementById("editButton");
      editButton.innerHTML = "Edit";
      editButton.onclick = edit;

      if (uploadButton.style.display === 'block') {
        uploadButton.style.display = 'none';
      }

      // Reset the pog object to its original state
      pog = JSON.parse(JSON.stringify(pogCopy));

      for (const key in pog) {
        if (Object.hasOwnProperty.call(pog, key)) {
          const element = pog[key];
        }
      }
        // Remove the extra color option if it exists
  var selectElement = document.getElementById("Pogs");
  var options = selectElement.options;
  for (var i =  0; i < options.length; i++) {
    if (options[i].value === newExtraValue) {
      selectElement.remove(i);
      break;
    }
  }

      var selectElement = document.getElementById("Pogs");
      var optionsLength = selectElement.options.length;
      if (optionsLength > pog.colors.length) {
        selectElement.removeChild(selectElement.options[optionsLength - 1]);
      }

      // Clear the uploadedImages array
      uploadedImages = {};
      // }
    }

 function save() {
  // Retrieve the selected color and check if it's the default text
  var selectedColorElement = document.getElementById("Pogs");
  var selectedColor = selectedColorElement.options[selectedColorElement.options.length -1].text;
  var defaultExtraColorText = "Choose an extra color...";
  var extraColorChanged = selectedColor != defaultExtraColorText;

  // Check if an image has been uploaded
  var imageUploaded = Object.keys(uploadedImages).length >  0;

  // Prepare the colorData array, adding the selected color if it has changed
  var colorData = Array.from(document.getElementById('Pogs').options).map(function (option) {
    return option.text;
  });
  if (!extraColorChanged) {
    colorData.pop();
  }

  // Format the uploaded image properly
  if (imageUploaded) {
    // Use the selected color as the property name that corresponds to the color
    var newImageKey = selectedColor;
    uploadedImages[newImageKey] = pogpng.src; // The image data
  }

  // Gather the rest of the data from the input fields
  var amountData = document.getElementById('amount').textContent.trim();
  var serialData = document.getElementById('serial').textContent.trim();
  var tagsData = document.getElementById('tags').textContent.trim();
  var loreData = document.getElementById('lore').textContent.trim();

  // Construct the data object to send to the server
   var data = {
    color: colorData,
    amount: amountData,
    serial: serialData,
    tags: tagsData,
    lore: loreData,
    uid: pogData.uid,
    uploadedImages: uploadedImages
  };
console.log(data);
  // Convert the data to a string and calculate the size in bytes
  var dataString = JSON.stringify(data);
  var dataSize = new Blob([dataString]).size;

  // Check if the data size is over  20MB
  if (dataSize >  20 *  1024 *  1024) {
    alert('The data is too large to send. Please reduce the size of the data sent, or save in smaller chunks.');
    return;
  }
  // Send the data to the server using the Fetch API
  fetch('/savePog', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  })
  .then(response => response.json())
  .then(data => console.log(`Server responded with: ${JSON.stringify(data)}`))
  .catch((error) => {
    console.error('Error:', error);
  });
}
  </script>
</body>

</html>