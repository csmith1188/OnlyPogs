<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>OnlyPogs</title>
</head>

<script>

    // Takes the rows passed from main.js and stringify's and sets it to a variable
    var data = <%- JSON.stringify(rows) %>;

    var filteredData = []

    // Define a variable to store the current sort order
    var currentSortOrder = 'asc';

    /**
     * A function that changes the sort order
    */
    function toggleSortOrder() {
        // Check if the current sort order is 'asc' and reset it if necessary
        if (currentSortOrder === 'asc') {
            currentSortOrder = 'desc';
        } else {
            currentSortOrder = 'asc';
        }

    }

    /**
     * A function that sorts the table by name
    */
    function sortByName() {
        toggleSortOrder();

        if (filteredData.length > 0) {
            filteredData.sort((a, b) => {
                const comparison = a.name.localeCompare(b.name);
                return currentSortOrder === 'asc' ? comparison : -comparison;
            });
            updateTable(filteredData);
        } else {
            // If no filter is applied, sort the original data
            data.sort((a, b) => {
                const comparison = a.name.localeCompare(b.name);
                return currentSortOrder === 'asc' ? comparison : -comparison;
            });
            updateTable(data);
        }
    }
    /**
     * A function that sorts the table by serial number
    */
    function sortBySerial() {
        toggleSortOrder();

        if (filteredData.length > 0) {
            filteredData.sort((a, b) => {
                const comparison = a.serial.localeCompare(b.serial);
                return currentSortOrder === 'asc' ? comparison : -comparison;
            });
            updateTable(filteredData);
        } else {
            // If no filter is applied, sort the original data
            data.sort((a, b) => {
                const comparison = a.serial.localeCompare(b.serial);
                return currentSortOrder === 'asc' ? comparison : -comparison;
            });
            updateTable(data);
        }
    }
    /**
     * A function that sorts the table by amount
    */
    function sortByAmount() {
        toggleSortOrder();
        if (filteredData.length > 0) {
            filteredData.sort((a, b) => {
                const amountA = String(a.amount); // Convert to string for string-based comparison
                const amountB = String(b.amount);
                const comparison = amountA.localeCompare(amountB);
                return currentSortOrder === 'asc' ? comparison : -comparison;
            });
            updateTable(filteredData);
        } else {
            // If no filter is applied, sort the original data
            data.sort((a, b) => {
                const amountA = String(a.amount);
                const amountB = String(b.amount);
                const comparison = amountA.localeCompare(amountB);
                return currentSortOrder === 'asc' ? comparison : -comparison;
            });
            updateTable(data);
        }
    }

    /**
     * A function that sorts the  table by tags
    */
    function sortByTags() {
        toggleSortOrder();
        if (filteredData.length > 0) {
            // If there's filtered data, don't sort the original data
            filteredData.sort((a, b) => {
                const comparison = a.tags.localeCompare(b.tags);
                return currentSortOrder === 'asc' ? comparison : -comparison;
            });
            updateTable(filteredData);
        } else {
            // If no filter is applied, sort the original data
            data.sort((a, b) => {
                const comparison = a.tags.localeCompare(b.tags);
                return currentSortOrder === 'asc' ? comparison : -comparison;
            });
            updateTable(data);
        }
    }

    /** 
     * A function that resets the filteredData array
    */
    function resetFilterAndSort() {
        filteredData = []; // Reset the filtered data
        updateTable(data); // Update the table with the original data
    }

    /** 
     * A function that filters the tags  
    */
    function filterTags() {
        const selectedTagElement = document.getElementById('tagFilter');
        const selectedTag = selectedTagElement.value;

        if (!selectedTagElement) {
            console.error("Element with ID 'tagFilter' not found.");
            return;
        }

        if (selectedTag === '') {
            resetFilterAndSort();
        } else {
            filteredData = data.filter((item) => item.tags === selectedTag);
            updateTable(filteredData);
        }
    }


    /**
     * This function updates the table based on the updated table data
     * Creates constants and sets them equal to the corresponding html element
    */
    function updateTable(updateData) {
        const tableBody = document.getElementById('table-body');
        const tableHead = document.getElementById('tableHead');
        tableBody.innerHTML = '';
        updateData.forEach((row) => {

            const tr = document.createElement('tr');
            const tdName = document.createElement('a');
            const tdSerial = document.createElement('td');
            const tdAmount = document.createElement('td');
            const tdTags = document.createElement('td');

            tdName.href = row.url; // Set the href attribute to the URL

            tdName.textContent = row.name;
            tdName.innerHTML = row.name;
            tdSerial.textContent = row.serial;
            tdAmount.textContent = row.amount;
            tdTags.textContent = row.tags;


            tr.appendChild(tdName);
            tr.appendChild(tdSerial);
            tr.appendChild(tdAmount);
            tr.appendChild(tdTags);


            tableBody.appendChild(tr);
        });
    }
</script>

<body>
    <!-- This is a dropdown that will sort the table with only the selected tag-->
    <div id="tagDropDown">
        <select name="tagFilter" id="tagFilter" onchange="filterTags()">
            <option value="">All Tags</option>
            <% const uniqueTags=Array.from(new Set(rows.map(row=> row.tags))); %>
                <% for (let i=0; i < uniqueTags.length; i++) { %>
                    <option value="<%= uniqueTags[i] %>">
                        <%= uniqueTags[i] %>
                    </option>
                    <% } %>

        </select> <br>
        <!--Buttons to take you to the account page and the rewards page-->
        <button class="button" id="accButton"><a href="/acc">Account</a></button>
        <button class="button" id="rewardButton"><a href="/rewards">Rewards</a></button>

    </div>

    <table id="table">
        <thead>
            <tr>
                <!-- Each column header has its own onclick function that sorts the by the column  -->
                <th id="name" onclick="sortByName()">Name --</th>
                <th id="serial" onclick="sortBySerial()">Serial Number --</th>
                <th id="amount" onclick="sortByAmount()">Amount Produced --</th>
                <th id="tags" onclick="sortByTags()">Tags --</th>
            </tr>
        </thead>
        <tbody id="table-body">
            <!-- A for loop that loops through the length of the row and displays it as a table -->
            <% for(let i=0; i < rows.length; i++) {%>
                <tr>
                    <td>
                        <a href="<%- rows[i].url %>"><%- rows[i].name %></a>
                    </td>
                    <td>
                        <%- rows[i].serial %>
                    </td>
                    <td>
                        <%- rows[i].amount %>
                    </td>
                    <td>
                        <%- rows[i].tags %>
                    </td>
                </tr>
                <% } %>
        </tbody>
    </table>

</body>

</html>