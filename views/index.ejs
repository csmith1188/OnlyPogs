<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>OnlyPogs</title>
</head>
<script>
    // grabbing the headers by their Id 
    var Hname = document.getElementById('name');
    var Hserial = document.getElementById('serial');
    var Hamount = document.getElementById('amount');
    var Htags = document.getElementById('tags');

    console.log(Hname.innerHTML);
    // these booleans check the array to see if it is already sorted.
    var namesorted = false
    var amountsorted = false
    var Numbersorted = false
    var tagsorted = false

    // first create the table using the pog data.
    // for (const index in pog) {
    //     // create rows for the table to append the imported data.
    //     let row = document.createElement("tr")
    //     row.setAttribute("id", `${index}`)
    //     row.innerHTML = `<th> <a href='${pog[index].url}' style="cursor: url('pogs/cursor${pog[index].name}.png') 10 10, pointer;"> ${rows[i].name} </a> </th>  <th class="number"> ${pog[index]['Serial Number']}</th>  <th class="amount"> ${pog[index]['Amount Produced']}</th> <th class="tags"> ${pog[index].tags}</th>`
    //     document.getElementById('table').appendChild(row)
    // }

    // when the header of the table is clicked except the color header, it will sort the whole table.
    function reOrder(label) {
        switch (label) {
            case "name":
                sorted("name");
                pog.sort(sortName);
                break;

            case "amount":
                sorted("Amount Produced");
                pog.sort(sortamount);
                break;

            case "serial":
                sorted("Serial Number");
                pog.sort(sortnumber);
                break;
        }

        // clear the table body before adding the new sorted rows
        document.querySelector("#table tbody").innerHTML = "";

        // for (const index in pog) {
        //     let row = document.createElement("tr");
        //     row.setAttribute("id", `${index}`);
        //     row.innerHTML = `<th> <a href='${pog[index].url
        //         }' style="cursor: url('pogs/cursor${pog[index].name
        //         }.png') 10 10, pointer;"> ${pog[index].name} </a> </th>  <th class="number"> ${pog[index]["Serial Number"]
        //         }</th>  <th class="amount"> ${pog[index]["Amount Produced"]
        //         }</th> <th class="tags"> ${pog[index].tags}</th>`;
        //     document.querySelector("#table tbody").appendChild(row);
        // }
    }
    // this function is going to check the whole array to see if it is already sorted, if it is, than it is true.
    function sorted(label) {
        namesorted = true
        amountsorted = true
        Numbersorted = true
        // only happens when we are sorting by Serial Number and Amount Produced.
        if (label == 'Amount Produced') {
            for (let i = 0; i < pog.length; i++) {
                if (pog[i + 1]) {
                    // it needs to be changed from a string to a number to compare.
                    if (Number(pog[i]['Amount Produced']) > Number(pog[i + 1]['Amount Produced'])) {
                        amountsorted = false
                        break;
                    }
                }

            }
            //only if we are sorting the array by name
        } else if (label == 'name') {
            for (let i = 0; i < pog.length; i++) {
                if (pog[i + 1]) {
                    if (pog[i].name.toLowerCase() > pog[i + 1].name.toLowerCase()) {
                        namesorted = false
                        break;
                    }
                }

            }
            //only sorting the table with serial number 
        } else if (label == 'Serial Number') {
            for (let i = 0; i < pog.length; i++) {
                if (pog[i + 1]) {
                    //it removes any characters in the string than turns them into a number to compare.
                    let firstSerial = pog[i]['Serial Number'].replace(/[a-zA-Z]/g, "")
                    let secondSerial = pog[i + 1]['Serial Number'].replace(/[a-zA-Z]/g, "")
                    if (Number(firstSerial) > Number(secondSerial)) {
                        Numbersorted = false
                        break;
                    }
                }

            }
        }

    }
    // this will sort the whole array by using it's name and compare it to other names in the array.
    function sortName(a, b) {
        let fa = a.name.toLowerCase()
        let fb = b.name.toLowerCase()
        //it changes the whole string to lowercase for a more accurate comparision. 
        if (namesorted == false) {
            Hname.innerHTML = 'Name ⬇'
            Hserial.innerHTML = 'Serial Number --'
            Hamount.innerHTML = 'Amount Produced --'
            if (fa < fb) {
                return -1
            } else if (fa > fb) {
                return 1;
            } else {
                return 0;
            }
        } else {
            Hname.innerHTML = 'Name ⬆'
            Hserial.innerHTML = 'Serial Number --'
            Hamount.innerHTML = 'Amount Produced --'
            if (fa < fb) {
                return 1
            } else if (fa > fb) {
                return -1;
            } else {
                return 0;
            }
        }
    }
    function sortamount(a, b) {
        //first check the string to see if it is a number, then change the number to string for comparison
        if (amountsorted == false) {
            Hserial.innerHTML = 'Serial Number --'
            Hname.innerHTML = 'Name --'
            Hamount.innerHTML = 'Amount Produced ⬆'
            if (isNaN(a['Amount Produced'])) {
                return -1
            } else {
                if (isNaN(b['Amount Produced'])) {
                    return 1
                } else {
                    return Number(a['Amount Produced']) - Number(b['Amount Produced'])
                }
            }
        } else {
            Hserial.innerHTML = 'Serial Number --'
            Hname.innerHTML = 'Name --'
            Hamount.innerHTML = 'Amount Produced ⬇'
            if (isNaN(a['Amount Produced'])) {
                return 1
            } else {
                if (isNaN(b['Amount Produced'])) {
                    return -1
                } else {
                    return Number(b['Amount Produced']) - Number(a['Amount Produced'])
                }
            }
        }
    }

    function sortnumber(a, b) {
        //first remove any character in the string, then check if the string is a number then turn the string to number for comparison.
        let na = a['Serial Number'].replace(/[a-zA-Z, ]/g, "")
        let nb = b['Serial Number'].replace(/[a-zA-Z, ]/g, "")

        if (Numbersorted == false) {
            Hserial.innerHTML = 'Serial Number ⬆'
            Hname.innerHTML = 'Name --'
            Hamount.innerHTML = 'Amount Produced --'

            if (isNaN(na)) {
                return -1
            } else {
                if (isNaN(nb)) {
                    return 1
                } else {
                    return Number(na) - Number(nb)
                }
            }
        } else {
            Hserial.innerHTML = 'Serial Number ⬇'
            Hname.innerHTML = 'Name --'
            Hamount.innerHTML = 'Amount Produced --'
            if (isNaN(na)) {
                return 1
            } else {
                if (isNaN(nb)) {
                    return -1
                } else {
                    return Number(nb) - Number(na)
                }
            }
        }
    }





</script>

<body>

    <!-- each header has it's own onclick function with the arguement to each collumn to sort to  -->
    <table id="table">
        <tr>
            <th onclick="reOrder('name')" id="name">Name --</th>
            <th onclick="reOrder('Serial')" id="serial">Serial Number --</th>
            <th onclick="reOrder('Amount')" id="amount">Amount Produced --</th>
            <th onclick="reOrder('Tags')" id="tags">Tags --</th>
        </tr>
        <% for(let i=0; i < rows.length; i++) {%>
            <tr>
                <td>
                    <a href="<%- rows[i].url %>"><%- rows[i].name %></a>
                    <!-- <%- rows[i].name %> -->
                </td>
             
                <td>
                    <%- rows[i].serial %>
                </td>
                <td>
                    <%- rows[i].amount %>
                </td>
                <td>
                    <%- rows[i].tags %>
                </td>
            </tr>
            <% } %>
    </table>

</body>

</html>